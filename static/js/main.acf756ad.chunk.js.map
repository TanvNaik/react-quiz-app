{"version":3,"sources":["Components/QuestionBox.js","Components/data.js","App.js","reportWebVitals.js","index.js"],"names":["QuestionBox","question","options","answer","fixOption","questionKey","useState","opts","setOpts","useEffect","className","length","map","option","key","onClick","e","target","textContent","handleChange","id","questions","nanoid","App","questionBank","setQuestionBank","index","userAnswers","setUserAnswers","score","setScore","loadQuestions","n","Promise","resolve","sort","Math","random","slice","data","then","choosenOption","qindex","stateList","changed","obj","i","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acf756ad.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\n\r\nconst QuestionBox = ({question, answer, options, fixOption,questionKey}) => {\r\n    const [opts, setOpts] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        setOpts([...options]);\r\n    }, []);\r\n\r\n    const handleChange = (option)=>{\r\n        setOpts([option]);\r\n    }\r\n    return ( \r\n        <div className=\"qt-component\">\r\n           <div className=\"question\">\r\n           {question}\r\n           </div>\r\n           <div className=\"options\">\r\n               {\r\n                   ()=>{\r\n                       if(opts.length === 1){\r\n                        return (\r\n                            <button className=\"chosen\">{opts[0]}</button>\r\n                        )\r\n                       }\r\n                   }\r\n               }\r\n               {opts.map((option,key)=>{\r\n                   return (\r\n                       <button onClick={\r\n                           (e)=> {\r\n                               fixOption(e.target.textContent,questionKey,e);\r\n                               handleChange(option)\r\n                           }\r\n                        } id={key} key={key}>{option}</button>\r\n                   )\r\n               })\r\n               }\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuestionBox;\r\n","import { nanoid } from 'nanoid';\r\n\r\nconst questions = [\r\n    {\r\n        id: nanoid(),\r\n        question: \"What is the relationship between resistivity r and conductivity s?\",\r\n        options: [\"R = s^2\", \"R = s\", \"R = 1/s\", \"R > s\" ],\r\n        answer: \"R = 1/s\",\r\n    },\r\n    {\r\n        id: nanoid(),\r\n        question: \"Which planet in our solar system is known as the Red Planet?\",\r\n        options: [\"Earth\", \"Venus\", \"Saturn\", \"Mars\" ],\r\n        answer: \"Mars\",\r\n    },\r\n    {\r\n        id: nanoid(),\r\n        question: \"How many hours are there in a day?\",\r\n        options: [\"24 hours\", \"16 hours\", \"12 hours\", \"48 hours\" ],\r\n        answer: \"24 hours\",\r\n    },\r\n    {\r\n        id:nanoid(),\r\n        question: \" 1 L is equal to how many grams?\",\r\n        options: [\"100 ml\", \"50 ml\", \"1000 ml\", \"500 ml\"],\r\n        answer: \"1000 ml\",\r\n    },\r\n    {\r\n        id: nanoid(),\r\n        question: \"Ordinary table salt is sodium chloride. What is baking soda?\",\r\n        options: [\"Potassium chloride\", \"Potassium carbonate\", \"Potassium hydroxide\", \"Sodium bicarbonate\" ],\r\n        answer: \"Sodium bicarbonate\",\r\n    },\r\n    {\r\n        id: nanoid(),\r\n        question: \"What is the name of the biggest planet in our solar system?\",\r\n        options: [\"Saturn\", \"Mars\", \"Jupiter\", \"Earth\" ],\r\n        answer: \"Jupiter\",\r\n    },\r\n    {\r\n        id: nanoid(),\r\n        question: \"Pollen grains in plants are produced in\",\r\n        options: [\"roots\", \"leaves\", \"flower\", \"stem\"],\r\n        answer: \"flower\",\r\n    },\r\n    {\r\n        id: nanoid(),\r\n        question: \"OS computer abbreviation usually means ?\",\r\n        options: [\"Order of Significance\", \"Open Software\", \"Operating System\", \"Optical Sensor\" ],\r\n        answer: \"Operating System\",\r\n    },\r\n    {\r\n        id: nanoid(),\r\n        question: \"How many bits in a byte?\",\r\n        options: [\"4\", \"8\", \"16\", \"32\" ],\r\n        answer: \"8\",\r\n    },\r\n    {\r\n        id: nanoid(),\r\n        question: \"What does CPU stand for?\",\r\n        options: [\"Common People United\", \"Commonwealth Press Union\", \"Computer Parts of USA\", \"Central Processing Unit\" ],\r\n        answer: \"Central Processing Unit\",\r\n    },\r\n    {\r\n        id: nanoid(),\r\n        question: \"Electric bulb filament is made of\",\r\n        options: [\"Copper\", \"Aluminum\", \"Lead\", \"Tungsten\" ],\r\n        answer: \"Tungsten\",\r\n    }\r\n];\r\n\r\nexport default (n = 5) =>\r\n  Promise.resolve(questions.sort(() => 0.5 - Math.random()).slice(0, n));","import './App.css';\nimport React, {useState, useEffect} from 'react';\nimport QuestionBox from './Components/QuestionBox';\nimport data from './Components/data';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport CopyrightIcon from '@material-ui/icons/Copyright';\n\nfunction App() {\n\n   const [questionBank, setQuestionBank] = useState(\"\"); \n   const [userAnswers, setUserAnswers] = useState([{\n     index:\"\",\n     option:\"\"\n   }]); \n   const [score,setScore] = useState(\"\")\n\n  // setting 5 random questions from data in questionBank\n  const loadQuestions = () => {\n    data().then(question =>{\n      setQuestionBank(question);\n    })\n    setScore(\"\");\n  } \n  \n  // updates userAnswers whenever user clicks on any option\n  const fixOption = (choosenOption, qindex,e) =>{\n    let stateList = userAnswers;\n    let changed = false;\n    stateList.map((obj, i)=>{\n        if(obj.index === qindex){\n          stateList[i] = {index: qindex, option: choosenOption}\n          changed = true\n        }  \n      })\n      setUserAnswers(stateList)\n      if(!changed){\n        setUserAnswers([...userAnswers, {index: qindex, option:choosenOption\n        }])\n      }\n  }\n\n  const checkAnswers = () =>{\n    if(userAnswers.length > 1){\n      let score=0;\n      userAnswers.map((obj, index)=>{\n        if(index>0){\n          if(obj.option === questionBank[obj.index].answer){\n            score++;\n          }\n        }\n      })\n     setScore(score)\n    }\n  }\n\n  useEffect(()=>{\n    loadQuestions();\n  },[]) \n\n\n  return (\n    <div className=\"outer\">\n      <div className=\"header\">\n        <h1>Quizzeria</h1>\n      </div>\n\n        {/* loads main component only when questions are loaded in questionBank */}\n        {questionBank  && (\n            <div className=\"main\">\n              {questionBank.map((question,questionKey) => \n                <QuestionBox question={question.question} answer={question.answer} options={question.options} fixOption={fixOption} key ={questionKey} questionKey={questionKey}/>\n              )}\n              <div className=\"submit\">\n              <button className=\"submit-btn\" onClick={checkAnswers}>Submit</button>\n              </div>\n            </div>\n          )\n        }\n        \n        {/* display Score */}\n        { score !==\"\" && (\n          <div className=\"score-outer\">\n            <div className=\"score-inner\">\n            <h3>You Scored: {score}</h3>\n            <button className=\"new-quiz\" onClick={loadQuestions}>Play Again</button>\n          </div></div>\n        )}\n\n        {/*TODO: copyright section*/}\n        <div className=\"copyright\">\n          <div className=\"copyright-1\">\n              COPYRIGHT <CopyrightIcon className\n              =\"Icon cr\"/> 2021 TANVI. ALL RIGHTS RESERVED.\n          </div>\n          <div className=\"copyright-2\">\n          <a href=\"https://github.com/TanvNaik\"><GitHubIcon className=\"Icon\"/></a>\n          <a href=\"linkedin.com/in/tanvi-naik-a550941a8\"><LinkedInIcon className=\"Icon\"/></a>\n          <a href=\"https://www.instagram.com/_tan_vi__/\"><InstagramIcon className=\"Icon\"/></a>\n          </div>\n          \n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}